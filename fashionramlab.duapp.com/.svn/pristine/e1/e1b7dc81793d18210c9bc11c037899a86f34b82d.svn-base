#! /usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = '北极鱼'

import tornado.web, meta, auth,  random
import xml.etree.ElementTree as ET
from db import Mysqldb, log

# 创建圈子
class CreateCircleHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route = r'/mod/cms/createcircle'
    def post(self):

        dao = CircleDao()
        root = ET.fromstring(self.request.body)
        name = root.find('name').text
        mname = root.find('mname').text
        res = dao.create_circle(name,mname ,self.get_secure_cookie('mobile'))

        if res is not None:
            self.set_header('Content-Type', 'text/xml; charset=utf-8')
            self.write('<member id="%s"/>'% int(res))
# 添加角色
class AddRoleHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route =r'/mod/cms/addrole'
    def post(self):

        dao = CircleDao()
        root = ET.fromstring(self.request.body)
        rolename = root.find('rolename').text
        res = dao.create_role(self.get_secure_cookie('mobile'),rolename)

        if res is not None:
            self.set_header('Content-Type', 'text/xml; charset=utf-8')
            self.write('<roles id="%s"/>'% int(res))


# 添加圈子
class AddCircleHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route = r'/mod/cms/addcircle'
    pass







class CircleDao(object):
    def __init__(self):
        self.db = Mysqldb()
        self.__create_table(self.db)

    def __create_table(self, db):
        #  圈子
        db.execute('''
                CREATE TABLE IF NOT EXISTS weicbd_mp_circle(
                id bigint NOT NULL AUTO_INCREMENT,
                name varchar(50) NOT NULL,
                PRIMARY KEY (id)
                ) ''')

        # 角色
        db.execute('''
                CREATE TABLE IF NOT EXISTS weicbd_mp_role(
                id bigint NOT NULL AUTO_INCREMENT,
                name varchar(30) NOT NULL,
                circleid bigint NULL,
                FOREIGN KEY (circleid) REFERENCES weicbd_mp_circle(id),
                PRIMARY KEY (id)
                )
         ''')

        #  圈子成员
        db.execute('''
                CREATE TABLE IF NOT EXISTS weicbd_mp_circle_member(
                id bigint NOT NULL AUTO_INCREMENT,
                name varchar(50) NOT NULL,
                roleid  bigint NULL,
                circleid bigint NULL,
                memberid bigint NULL,
                FOREIGN KEY (circleid) REFERENCES weicbd_mp_circle(id),
                FOREIGN KEY (roleid) REFERENCES weicbd_mp_role(id),
                FOREIGN KEY (memberid) REFERENCES weicbd_mp_member(id),
                PRIMARY KEY (id)
                )
         ''')
        db.commit()

    # 创建圈子
    def create_circle(self, name, mname, member):
        # 找到当前帐号的id
        memberid, = self.db.fetchone('select id from weicbd_mp_member where mobile=%s',(member,)) or (None, )
        if memberid is not None:
            # 新建圈子成功返回圈子ID
            circleid = self.db.execute('insert into weicbd_mp_circle (name) values(%s)', (name,)) or (None, )
            # 新建一个圈主的角色
            roleid = self.db.execute('insert into weicbd_mp_role (name,circleid) values("圈主",%s)',(circleid, )) or (None, )
            # 新建一个成员变量
            self.db.execute('insert into weicbd_mp_circle_member (name, roleid, circleid, memberid) values(%s, %s, %s, %s)', (mname, roleid, circleid, memberid)) or (None,)
            self.db.commit()
            return circleid

    # 添加圈子
    def insert_circle(self):
        pass

    # 退出圈子
    def exit_circle(self):
        pass

    # 踢出成员
    def exit_member(self):
        pass

    # 创建角色
    def create_role(self, circlemember, rname):
        circleid, = self.db.fetchone('select a.circleid from weicbd_mp_circle_member a ,weicbd_mp_member b where a.memberid = b.id and b.mobile = %s',(circlemember,)) or (None, )
        if circleid is not None:
            rid = self.db.execute('insert into weicbd_mp_role (name,circleid) values(%s,%s)',(rname,circleid)) or (None, )
            self.db.commit()
            return rid

    # 修改角色
    def update_role(self):
        pass

    # 删除角色
    def reomeve_role(self):
        pass
























































