#! /usr/bin/env python
# -*- coding: utf-8 -*-

import tornado.wsgi
import os
import meta
import weicbd
import orm
#import wx
import plugin
import upload
import rpc
import traceback
import sys
import service
import module
import ui_methods


class MainHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route = r'/handlers'
    def get(self):
        self.set_header('Content-Type', 'text/xml; charset=utf-8')
        self.write('<handlers>')
        for u in self.application.handlers[0][1]:
            self.write('<handle><route>%s</route><class>%s</class></handle>' % (u.regex.pattern, u.handler_class.__name__))
        self.write('</handlers>')
 

class LogHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route = r'/log'
    def get(self):
        self.write('<html><body>')
        from db import get_log_list
        self.write('<hr/>'.join(['<p>%s</p>' % l.content for l in get_log_list()]))
        self.write('</body></html>')

class PluginListHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route = r'/replyplugin'
    def get(self):
        self.set_header('Content-Type', 'text/xml; charset=utf-8')
        self.write('<plugins>')
        for k, v in meta.PluginMetaClass.plugins.items():
            self.write('<plugin><name>%s</name><class>%s</class></plugin>' % (v.name, k))
        self.write('</plugins>')


class ModuleListHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route = r'/modules'
    def get(self):
        self.set_header('Content-Type', 'text/xml; charset=utf-8')
        self.write('<modules>')
        for k, v in meta.ModuleMetaClass.modules.items():
            self.write('<module><name>%s</name><version>%s</version><class>%s</class></module>' % (v.name, v.version, k))
        self.write('</modules>')


class CrossDomainHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route = r'/cross'

    def post(self):
        from db import log
        import xml.etree.ElementTree as ET
        import urllib2
        try:

            root = ET.fromstring(self.request.body)
            opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())
            request = urllib2.Request(root.find('url').text)
            if root.find('method').text.upper() == 'GET':
                response = opener.open(request)
            elif root.find('method').text.upper() == 'POST':
                response = opener.open(request, root.find('data').text.encode('utf-8'))

            self.write(response.read())
        except:
            import traceback
            log(traceback.format_exc())
            self.write_error(500)


class ImportCheckHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route = r'/importcheck'

    def get(self):
        import sys
        self.set_header('Content-Type', 'text/xml; charset=utf-8')
        self.write(u'<modules>')
        map(lambda module: self.write(u'<module>%s</module>' % module), sys.modules)
        self.write(u'</modules>')
        
        
class StaticTemplateHandler(tornado.web.RequestHandler):
    def get(self, path):
        args = { k: v[0] if len(v) == 1 else v for k, v in self.request.arguments.items() }
        self.render(path, **args)


app_root = os.path.dirname(__file__)
settings = { 
    'static_path': os.path.join(app_root, 'static'),
    'template_path': os.path.join(app_root, 'templates'),
    'gzip': True,
    'debug': True,
    'cookie_secret': 'X9Plz67NkE63PbF1rkY5rc36LcfqCta1',
    'login_url': '/login',
    'ui_methods': ui_methods,
}

handlers = meta.HandlerMetaClass.handlers + [
    (r'/(portal/.*)', StaticTemplateHandler),
    (r'/(.*\.html)', tornado.web.StaticFileHandler, {'path': settings['static_path']}),
    (r'/(.*\.htm)', tornado.web.StaticFileHandler, {'path': settings['static_path']}),
    (r'/(.*\.css)', tornado.web.StaticFileHandler, {'path': settings['static_path']}),
    (r'/(.*\.js)', tornado.web.StaticFileHandler, {'path': settings['static_path']}),
    (r'/(.*\.png)', tornado.web.StaticFileHandler, {'path': settings['static_path']}),
    (r'/(.*\.jpg)', tornado.web.StaticFileHandler, {'path': settings['static_path']}),
    (r'/(.*\.xml)', tornado.web.StaticFileHandler, {'path': settings['static_path']}),
    (r'/(.*\.xsl)', tornado.web.StaticFileHandler, {'path': settings['static_path']}),
    (r'/', tornado.web.RedirectHandler, {"url": "/portal/index.html", "permanent": True}),
]
app = tornado.wsgi.WSGIApplication(handlers, **settings)

from sys import modules
if 'bae' in modules:
    from bae.core.wsgi import WSGIApplication
    application = WSGIApplication(app)
elif 'sae' in modules:
    import sae
    application = sae.create_wsgi_app(app)
else:
    application = app
