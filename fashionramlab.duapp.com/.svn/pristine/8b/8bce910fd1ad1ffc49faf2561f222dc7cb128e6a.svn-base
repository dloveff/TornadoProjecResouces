#! /usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = '北极鱼'

import tornado.web, meta, auth
import xml.etree.ElementTree as ET
from db import Mysqldb, log

# 小商品列表
class ProductListHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route = r'/mod/shop/productlist'
    def get(self):
        try:
            dao = ProductDao()
            root = ET.Element('products')   # 设置根节点

            for result in dao.all_products():
                id, name, price, store,  litimgpath, summary, taglist_xml = result
                mess = ET.SubElement(root, 'product', {'id': str(id)})  # 设置子节点 属性值
                self.__append_element(mess, 'name', name)  # 设置孙节点
                self.__append_element(mess, 'price', str(price))        # 价格
                self.__append_element(mess, 'store', str(store))    # 库存
                self.__append_element(mess, 'litimgpath', litimgpath)   # 缩略图
                self.__append_element(mess, 'summary', summary)        # 概述
                tags = ET.fromstring(taglist_xml.encode('utf-8'))
                mess.append(tags)
            self.set_header('Content-Type', 'text/xml; charset=utf-8')
            self.write(ET.tostring(root, encoding='UTF-8'))
        except:
            import traceback
            err = traceback.format_exc()
            log(err)
            self.send_error(500)
            self.write(err)

    def __append_element(self, parent, tag, value):
        e = ET.Element(tag)
        if value:
            e.text = value
        parent.append(e)

# 按标签检索商品
class QueryProductHandler(tornado.web.RequestHandler):
    __metaclass__= meta.HandlerMetaClass
    route =r'/mod/shop/queryproduct/(.*)'
    def get(self, queryid):
        dao = ProductDao()
        root = ET.Element('products')   # 设置根节点
        taglist = self.get_arguments('tag') or []          # 拿到get方法上URL传过来的标签

        for result in dao.query_products(taglist, queryid):
            id, name, price, store, description, summary, litimgpath, spec, taglist = result
            mess = ET.SubElement(root, 'product', {'id': str(id)})  # 设置子节点 属性值
            self.__append_element(mess, 'priority', name)  # 设置孙节点
            self.__append_element(mess, 'price', str(price))
            self.__append_element(mess, 'store', str(store))
            self.__append_element(mess,  'description', description)
            self.__append_element(mess, 'litimgpath', litimgpath)
            self.__append_element(mess, 'spec', spec)
            tagelement = ET.fromstring(taglist.encode('utf-8'))
            mess.append(tagelement)
        self.set_header('Content-Type', 'text/xml; charset=utf-8')
        self.write(ET.tostring(root, encoding='UTF-8'))

    def __append_element(self, parent, tag, value):
        e = ET.Element(tag)
        if value:
            e.text = value
        parent.append(e)

# 添加商品
class AddProductHandler(tornado.web.RequestHandler):
    __metaclass__= meta.HandlerMetaClass
    route = r'/mod/shop/addproduct'
    def post(self):
        dao = ProductDao()
        self.set_header('Content-Type', 'text/xml; charset=utf-8')
        root = ET.fromstring(self.request.body)
        name = root.find('name').text   # 名称
        price = root.find('price').text     # 价格
        store = root.find('store').text    # 库存
        description = root.find('description').text    # 描述
        summary = root.find('summary').text # 概述
        litimgpath = root.find('litimgpath').text   # 缩略图
        spec = root.find('spec').text       # 规格
        taglist = root.find('tags')        # 标签
        res = dao.add_products(name, price, store, description, summary, litimgpath, spec, ET.tostring(taglist, encoding='UTF-8', method="html"))
        if res is not None:
            self.set_header('Content-Type', 'text/xml; charset=utf-8')
            self.write('<products id="%s"/>'% int(res))

# 修改商品
class PutProductHandler(tornado.web.RequestHandler):
    __metaclass__= meta.HandlerMetaClass
    route = r'/mod/shop/putproduct/(.*)'
    def put(self, id):
        dao = ProductDao()
        self.set_header('Content-Type', 'text/xml; charset=utf-8')
        root = ET.fromstring(self.request.body)
        name = root.find('name').text
        price = root.find('price').text     # 价格
        store = root.find('store').text    # 库存
        description = root.find('description').text    # 描述
        summary = root.find('summary').text  # 概述
        litimgpath = root.find('litimgpath').text   # 缩略图
        spec = root.find('spec').text       # 规格
        dao.put_products(name, price, store, description, summary, litimgpath, spec, id)
        self.set_header('Content-Type', 'text/xml; charset=utf-8')
        self.write('<products id="%s"/>' % int(id))

class RemoveProductHandler(tornado.web.RequestHandler):
    __metaclass__= meta.HandlerMetaClass
    route = r'/mod/shop/removeproduct/(.*)'
    def delete(self,id):
        dao = ProductDao()
        res = dao.remove_product(id)
        self.set_header('Content-Type', 'text/xml; charset=utf-8')
        self.write('<products id="%s"/>' % int(res))

class ProductDao(object):

    def __init__(self):
        self.db = Mysqldb()
        self.__create_table(self.db)

    # 创建表
    def __create_table(self,db):
        # 商品
        db.execute('''
            CREATE TABLE IF NOT EXISTS weicbd_shopping_product (
                id bigint NOT NULL AUTO_INCREMENT,
                indentid bigint null,
                name varchar(50) null,
                price float null,
                store int null,
                description varchar(100) null,
                litimgpath varchar(40) null,
                spec varchar(20) null,
                summary varchar(50) null,
                taglist varchar(255) null,
                PRIMARY KEY (id)
            ) DEFAULT CHARACTER SET=utf8;
        ''')

        #  图片
        db.execute('''
            create table if not exists weicbd_shopping_image(
                id bigint not null auto_increment,
                productid bigint null,
                name varchar(20) null,
                url varchar(100) null,
                FOREIGN KEY (productid) REFERENCES weicbd_shopping_product(id),
                primary key (id)
            )DEFAULT CHARACTER SET=utf8;
        ''')
        db.commit()

    # 新增商品
    def add_products(self, name, price, store, description, summary, litimgpath, spec, taglist):
        result = self.db.fetchone('select spec from weicbd_shopping_product where spec=%s', (spec,))
        if result is None:
            res = self.db.execute('insert into weicbd_shopping_product (name, price, store, description, summary, litimgpath, spec, taglist) value(%s, %s, %s, %s, %s, %s, %s, %s)',( name, price, store, description, summary, litimgpath, spec, taglist))
            self.db.commit()
            return res

    # 修改商品
    def put_products(self, name, price, store, description, summary, litimgpath, spec, id):
        self.db.execute('update weicbd_shopping_product set name=%s, price=%s, store=%s, description=%s, summary=%s, litimgpath=%s, spec=%s where id=%s',( name, price, store, description, summary, litimgpath, spec, id))
        self.db.commit()

    # 删除商品
    def remove_product(self, id):
        self.db.execute('delete from weicbd_shopping_product where id = %s',(id,))
        self.db.commit()
        return id

    # 小列表
    def all_products(self):
        return self.db.fetchall('select id, name, price, store,  litimgpath, summary, taglist from weicbd_shopping_product')

    # 商品明细
    def find_products(self, id):
        return self.db.fetchall('select a.id, a.name, a.taglist, b.name, b.url from weicbd_shopping_product a, weicbd_shoping_image b where a.id =b.productid and b.productid = %s',(id,))

    #  按标签查找商品列表
    def query_products(self, taglist, id):
        substring = ' and '.join(['(count(/tags/tag[self:text()="%s"]) >=1)' % x for x in taglist])
        return self.db.fetchone('SELECT  id, name, price, store, description, summary, litimgpath, spec, taglist from weicbd_shopping_product where id in (select ft.id from (SELECT id, EXTRACTVALUE( tag,\'%s\' ) as flag FROM weicbd_shopping_product) as ft where ft.flag=1) and id =%s'% (substring, id))







