#! /usr/bin/env python
# -*- coding: utf-8 -*-

from bae.core import const


class Mysqldb(object):
    def __conn(self):
        if self.conn is None:
            from MySQLdb import connect
            dbconf = {
                'user': const.MYSQL_USER,
                'passwd': const.MYSQL_PASS,
                'db': 'NtwLDxlnbZIsMEPsgrFH',
                'host' : const.MYSQL_HOST,
                'port' : int(const.MYSQL_PORT),
                'charset' : self.charset
            }
            self.conn = connect(**dbconf)
        return self.conn

    def __init__(self):
        self.charset = 'utf8'
        self.conn = None

    def commit(self):
        self.__conn().commit()

    def close(self):
        self.__conn().close()

    def execute(self, sql, arg=None):
        cursor = self.__conn().cursor()
        cursor.execute(sql, arg or tuple())
        cursor.close()
        return cursor.lastrowid

    def executemany(self, sql, arg):
        cursor = self.__conn().cursor()
        cursor.executemany(sql, arg or tuple())
        cursor.close()

    def rollback(self):
        self.__conn().rollback()

    def select(self, sql, arg=None):
        cursor = self.__conn().cursor()
        cursor.execute(sql, arg or tuple())
        for r in cursor:
            try:
                yield r
            except GeneratorExit:
                cursor.close()
            # cursor.close()

    def fetchone(self, sql, arg=None):
        cursor = self.__conn().cursor()
        cursor.execute(sql, arg or tuple())
        rt = cursor.fetchone()
        # cursor.close()
        return rt

    def fetchall(self, sql, arg=None):
        cursor = self.__conn().cursor()
        cursor.execute(sql, arg or tuple())
        for r in cursor.fetchall():
            try:
                yield r
            except GeneratorExit:
                cursor.close()

    def __create(self, cur):
        pass

    def __del__(self):
        if self.conn is not None:
            self.conn.close()


def log(msg):
    db = Mysqldb()
    db.execute('''
        CREATE TABLE IF NOT EXISTS weicbd_log (
            id bigint NOT NULL AUTO_INCREMENT,
            createTime timestamp NOT NULL DEFAULT NOW(),
            content text,

            PRIMARY KEY (id)
        )
    ''')

    db.execute('''
        INSERT INTO weicbd_log(content) VALUES(%s)
    ''', (msg,))
    db.commit()
    return msg


def get_log_list():
    db = getMysqldb()
    return db.fetchall('''
        SELECT createTime, content FROM weicbd_log ORDER BY createTime desc limit 0, 20
    ''')
