#! /usr/bin/env python
# -*- coding: utf-8 -*-

import tornado.web, meta, auth
import xml.etree.ElementTree as ET
from db import Mysqldb, log

class EssayHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route = r'/mparticle'

    def post(self):
        try:
             dao = CmsArticleDao()
             self.set_header('Content-Type', 'text/xml; charset=utf-8')
             root = ET.fromstring(self.request.body)
             mpid =int(root.get('mpid'))
             priority  = root.find('priority').text
             title = root.find('title').text
             content = root.find('content').text
             trglist = root.find('tags')
             res = dao.create_article(mpid,priority,title,content,ET.tostring(trglist, encoding='UTF-8', method="html"))
             self.write('<article id="%s"/>' % int(res))
        except:
            import traceback
            log(traceback.format_exc())
            self.send_error(500)

    def get(self):
       try:
            dao = CmsArticleDao()
            root = ET.Element('articles')   #设置根节点
            for result in dao.query_article():
                id,title,content,tag,mpid =result
                mess = ET.SubElement(root,'artocle', {'site-id':str(mpid)}) #设置子节点 属性值
                self.__append_element(mess, 'title', title)  #设置孙节点
                self.__append_element(mess, 'content', content)
                self.__append_element(mess, 'tag', tag)
            self.set_header('Content-Type', 'text/xml; charset=utf-8')
            self.write(ET.tostring(root, encoding='UTF-8', method="html"))
       except:
            import traceback
            log(traceback.format_exc())
            self.send_error(500)

    def __append_element(self, parent, tag, value):
        e = ET.Element(tag)
        if value:
            e.text = value
        parent.append(e)


class RemoveCmsArticleHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route = r'/mparticle/(.*)'

    def put(self,id):
        try:
            dao = CmsArticleDao()
            self.set_header('Content-Type', 'text/xml; charset=utf-8')
            root = ET.fromstring(self.request.body)
            priority  = root.find('priority').text
            title = root.find('title').text
            content = root.find('content').text
            trlgist = root.find('tags')
            dao.update_article(priority ,title,content,ET.tostring(trlgist, encoding='UTF-8', method="html"),id)
            self.write('<article id="'+id+'"/>')

        except:
            import traceback
            log(traceback.format_exc())
            self.send_error(500)

    def delete(self,mpid):
        try:
            dao = CmsArticleDao()
            dao.remove_article(mpid)
            self.set_header('Content-Type', 'text/xml; charset=utf-8')
            self.write('<article id="'+mpid+'"/>')
        except:
           import traceback
           log(traceback.format_exc())
           self.send_error(500)

    def get(self,value):
        #self.write(' and '.join(self.get_arguments('tag')))
        try:
             dao = CmsArticleDao()
             root = ET.Element('articles')   # 设置根节点
             mpid = int(self.get_argument('mpid'))           # 拿到mpid
             taglist = self.get_arguments('tag') or []          # 拿到get方法上URL传过来的标签
             for result in dao.query_tag(mpid, taglist):
                 id, title, content, tag, mpid =result
                 mess = ET.SubElement(root,'article', {'site-id':str(mpid)}) # 设置子节点 属性值
                 self.__append_element(mess, 'title', title)  # 设置孙节点
                 self.__append_element(mess, 'content', content)
                 self.__append_element(mess, 'tag', tag)
             self.set_header('Content-Type', 'text/xml; charset=utf-8')
             self.write(ET.tostring(root, encoding='UTF-8', method="html"))
        except:
             import traceback
             err = traceback.format_exc()
             log(err)
             self.send_error(500)
             self.write(err)

    def __append_element(self, parent, tag, value):
        e = ET.Element(tag)
        if value:
            e.text = value
        parent.append(e)



class CmsArticleDao(object):
     def __init__(self):
        self.db = Mysqldb()
        self.__create_table(self.db)

     def __create_table(self,db):
         db.execute('''
            CREATE TABLE IF NOT EXISTS  weicbd_mp_article (
            id bigint NOT NULL AUTO_INCREMENT,
            priority  bigint not null,
            title varchar(100) not null,
            content varchar(500) null,
            tag varchar(999) null,
            mpid bigint null,
            FOREIGN KEY (mpid) REFERENCES weicbd_mp_site(id),
            PRIMARY KEY (id)
            )''')
         db.commit()

     def query_article(self):
         return self.db.fetchall('select id,title,content,tag,mpid from weicbd_mp_article')

     def query_tag(self,mpid,taglist):
         substring = ' and '.join(['(count(/tags/tag[self:text()="%s"]) >=1)' % x for x in taglist])
         log(substring)
         sql = 'SELECT id, mpid, title, content, tag from weicbd_mp_article where id in (select ft.id from (SELECT id, EXTRACTVALUE( tag,\'%s\' ) as flag FROM weicbd_mp_article) as ft where ft.flag=1) and mpid=%d' % (substring, mpid)
         log(sql)
         return self.db.fetchall(sql)

     def create_article(self,mpid,priority ,title,content,tag):
         article = self.db.execute('insert into weicbd_mp_article (priority,title,content,tag,mpid) values(%s,%s,%s,%s,%s)',(priority,title,content,tag,mpid))
         self.db.commit()
         return article

     def update_article(self,priority ,title,content,tag,id):
         fessay = self.db.fetchone('select title from weicbd_mp_article where id=%s',(id,))
         if fessay is not None:
             article = self.db.execute('update weicbd_mp_article  set priority  = %s ,title = %s,content = %s,tag = %s where id=%s',(priority ,title,content,tag,id))
             self.db.commit()
             return article

     def remove_article(self,id):
         self.db.execute('delete from weicbd_mp_article where id=%s',(id,))
         self.db.commit()

