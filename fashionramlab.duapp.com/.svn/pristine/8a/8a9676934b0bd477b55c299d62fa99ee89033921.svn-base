#! /usr/bin/env python
# -*- coding: utf-8 -*-

import tornado.web, meta, auth
import xml.etree.ElementTree as ET
from db import Mysqldb, log

class EssayHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route = r'/mparticle'

    def post(self):
#        try:
        dao = CmsArticleDao()
        self.set_header('Content-Type', 'text/xml; charset=utf-8')
        root = ET.fromstring(self.request.body)
        priority  = root.find('priority').text
        title = root.find('title').text
        content = root.find('content').text
        tag = root.find('tag').text
        res = dao.create_article(priority,title,content,tag)
        self.write('<article id="%s"/>,% str(res)')

 #       except:
 #           import traceback
 #           log(traceback.format_exc())



    def put(self):
        try:
            dao = CmsArticleDao()
            self.set_header('Content-Type', 'text/xml; charset=utf-8')
            root = ET.fromstring(self.request.body)
            priority  = root.find('priority ').text
            title = root.find('title').text
            content = root.find('content').text
            tag = root.find('tag').text
            dao.update_article(priority ,title,content,tag)
            self.write('<article/>')

        except:
            import traceback
            log(traceback.format_exc())

class RemoveCmsArticleHandler(tornado.web.RequestHandler):
    __metaclass__ = meta.HandlerMetaClass
    route = r'/mparticle/(.*)'

    def delete(self,mpid):
        try:
            dao = CmsArticleDao()
            dao.remove_article(mpid)
            self.set_header('Content-Type', 'text/xml; charset=utf-8')
            self.write('<article id='+mpid+'/>')
        except:
            import traceback
            log(traceback.format_exc())



class CmsArticleDao(object):
     def __init__(self):
        self.db = Mysqldb()
        self.__create_table(self.db)

     def __create_table(self,db):
         db.execute('''
            CREATE TABLE IF NOT EXISTS  weicbd_mp_article (
            id bigint NOT NULL AUTO_INCREMENT,
            priority  bigint not null,
            title varchar(100) not null,
            content varchar(500) null,
            tag varchar(50) null,
            mpid bigint null,

            PRIMARY KEY (id)
            )''')
         db.commit()

     def create_article(self,priority ,title,content,tag):
#         fessay = self.db.fetchone('select title from weicbd_mp_aiticle where priority =%s and title=%s',(priority ,title))
#         if fessay == None:
         article = self.db.execute('insert into weicbd_mp_article (priority,title,content,tag) values(%s,%s,%s,%s)',(priority,title,content,tag))
         self.db.commit()
         return article

     def update_article(self,priority ,title,content,tag):
         fessay = self.db.fetchone('select title from weicbd_mp_article where priority =%s and title=%s',(priority ,title))
         if fessay == None:
             article = self.db.execute('update weicbd_mp_article  set priority  = %s ,title = %s,content = %s,tag = %s',(priority ,title,content,tag))
             self.db.commit()
             return article

     def remove_article(self,mpid):
         self.db.execute('delete from weicbd_mp_article where title=%s',(mpid,))
         self.db.commit()

