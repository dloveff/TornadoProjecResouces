#! /usr/bin/env python
# -*- coding: utf-8 -*-

from time import mktime, localtime
import xml.etree.ElementTree as ET
import meta, base64, zlib
from urllib import quote_plus
from db import log

textTmpl = '''
<xml>
<ToUserName><![CDATA[%s]]></ToUserName>
<FromUserName><![CDATA[%s]]></FromUserName>
<CreateTime>%d</CreateTime>
<MsgType><![CDATA[text]]></MsgType>
<Content><![CDATA[%s]]></Content>
</xml>
'''


def redirect_url(prefix, url, openid, ghid):
    from wx import encode_s_parameters
    return '%s/mpctx/?redirect=%s&s=%s' % (prefix,
                                           quote_plus('%s#weixin.qq.com' % url),
                                           quote_plus(encode_s_parameters(('openid=%s&ghid=%s' % (openid, ghid))))
    )


class BasePlugin(object):
    def response_message(self, request=None):
        pass


class TestingReplyPlugin(BasePlugin):
    __metaclass__ = meta.PluginMetaClass
    name = '“测试中”的文本回复'

    def response_message(self, request):
        return textTmpl % (
        self.parameters['FromUserName'], self.parameters['ToUserName'], int(mktime(localtime())), '内容测试中，敬请期待')


class TextLinkPlugin(BasePlugin):
    __metaclass__ = meta.PluginMetaClass
    name = '文本插件'

    def response_message(self, request):
        import re
        content = self.settings['Content']
        prefix = '%s://%s' % (request.protocol, request.host)
        for url in re.findall(r'<a href="([^"]*)">', content):
            content = content.replace('<a href="%s">' % url, '<a href="%s">' % redirect_url(prefix, url, self.parameters['FromUserName'], self.parameters['ToUserName']))
        return textTmpl % (
            self.parameters['FromUserName'], self.parameters['ToUserName'], int(mktime(localtime())), content)


class ArticlePlugin(BasePlugin):
    __metaclass__ = meta.PluginMetaClass
    name = '图文插件'

    def response_message(self, request):
        try:
            prefix = '%s://%s' % (request.protocol, request.host)
            root = ET.Element('xml')
            self.__append_element(root, 'ToUserName', self.parameters['FromUserName'])
            self.__append_element(root, 'FromUserName', self.parameters['ToUserName'])
            self.__append_element(root, 'CreateTime', str(int(mktime(localtime()))))
            self.__append_element(root, 'MsgType', 'news')
            self.__append_element(root, 'ArticleCount', str(len(self.settings['Articles'])))
            arts_elm = ET.SubElement(root, 'Articles')
            for article in self.settings['Articles']:
                item = ET.SubElement(arts_elm, 'item')
                self.__append_element(item, 'Title', article['Title'])
                self.__append_element(item, 'Description', article['Description'])
                self.__append_element(item, 'PicUrl', article['PicUrl'])
                self.__append_element(item, 'Url', redirect_url(prefix, article['Url'], self.parameters['FromUserName'],
                                                                self.parameters['ToUserName']))
            rep_xml = ET.tostring(root, encoding='UTF-8')
            return rep_xml
        except:
            import traceback
            log(traceback.format_exc())

    def __append_element(self, parent, tag, value):
        e = ET.Element(tag)
        if value is not None:
            e.text = value
        parent.append(e)
